{"version":3,"sources":["webpack:///./src/templates/blogTemplate.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/header.js","webpack:///./src/components/layout.js"],"names":["__webpack_require__","r","__webpack_exports__","d","Template","pageQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","reactstrap__WEBPACK_IMPORTED_MODULE_1__","_components_layout__WEBPACK_IMPORTED_MODULE_2__","_ref","markdownRemark","data","frontmatter","html","a","createElement","title","date","dangerouslySetInnerHTML","__html","m","module","exports","require","default","graphql","StaticQueryContext","StaticQuery","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","gatsby_link__WEBPACK_IMPORTED_MODULE_2__","gatsby_link__WEBPACK_IMPORTED_MODULE_2___default","_public_page_renderer__WEBPACK_IMPORTED_MODULE_3__","_public_page_renderer__WEBPACK_IMPORTED_MODULE_3___default","_parse_path__WEBPACK_IMPORTED_MODULE_4__","React","createContext","props","Consumer","staticQueryData","query","render","children","Error","propTypes","PropTypes","object","string","isRequired","func","ProdPageRenderer","location","pageResources","loader","getResourcesForPathnameSync","pathname","InternalPageRenderer","Object","assign","json","shape","Header","_this","_React$Component","call","this","toggle","bind","assertThisInitialized_default","state","isOpen","setState","react_default","reactstrap_es","fixed","light","color","expand","href","onClick","navbar","Component","Layout","gatsby_browser_entry","Fragment","Helmet_default","site","siteMetadata","meta","name","content","lang","header_Header","siteTitle","_2328579951","node"],"mappings":"0FAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,4BAAAE,IAAAJ,EAAAG,EAAAD,EAAA,8BAAAG,IAAA,IAAAC,EAAAN,EAAA,GAAAO,EAAAP,EAAAQ,EAAAF,GAAAG,EAAAT,EAAA,KAAAU,EAAAV,EAAA,KAMe,SAASI,EAATO,GAEZ,IACOC,EADPD,EADDE,KAEQD,eACAE,EAAsBF,EAAtBE,YAAaC,EAASH,EAATG,KACrB,OACER,EAAAS,EAAAC,cAACP,EAAA,EAAD,KACEH,EAAAS,EAAAC,cAACR,EAAA,EAAD,KACEF,EAAAS,EAAAC,cAACR,EAAA,EAAD,KACEF,EAAAS,EAAAC,cAACR,EAAA,EAAD,KACEF,EAAAS,EAAAC,cAAA,eACEV,EAAAS,EAAAC,cAAA,UAAKH,EAAYI,OACjBX,EAAAS,EAAAC,cAAA,SAAIH,EAAYK,MAChBZ,EAAAS,EAAAC,cAAA,OAAKG,wBAAyB,CAAEC,OAAQN,UAS/C,IAAMV,EAAS,kCC5BtB,IAAsBiB,EAKpBC,EAAOC,SALaF,EAKWG,EAAQ,OALRH,EAAEI,SAAYJ,oCCA/CtB,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,4BAAAyB,IAAA3B,EAAAG,EAAAD,EAAA,uCAAA0B,IAAA5B,EAAAG,EAAAD,EAAA,gCAAA2B,IAAA,IAAAvB,EAAAN,EAAA,GAAAO,EAAAP,EAAAQ,EAAAF,GAAAwB,EAAA9B,EAAA,GAAA+B,EAAA/B,EAAAQ,EAAAsB,GAAAE,EAAAhC,EAAA,KAAAiC,EAAAjC,EAAAQ,EAAAwB,GAAAhC,EAAAG,EAAAD,EAAA,yBAAA+B,EAAAjB,IAAAhB,EAAAG,EAAAD,EAAA,+BAAA8B,EAAA,aAAAhC,EAAAG,EAAAD,EAAA,6BAAA8B,EAAA,WAAAhC,EAAAG,EAAAD,EAAA,yBAAA8B,EAAA,OAAAhC,EAAAG,EAAAD,EAAA,4BAAA8B,EAAA,UAAAhC,EAAAG,EAAAD,EAAA,+BAAA8B,EAAA,iBAAAE,EAAAlC,EAAA,KAAAmC,EAAAnC,EAAAQ,EAAA0B,GAAAlC,EAAAG,EAAAD,EAAA,iCAAAiC,EAAAnB,IAAA,IAAAoB,EAAApC,EAAA,IAAAA,EAAAG,EAAAD,EAAA,8BAAAkC,EAAA,IAYA,IAAMR,EAAqBS,IAAMC,cAAc,IAEzCT,EAAc,SAAAU,GAAK,OACvBhC,EAAAS,EAAAC,cAACW,EAAmBY,SAApB,KACG,SAAAC,GACC,OACEF,EAAM1B,MACL4B,EAAgBF,EAAMG,QAAUD,EAAgBF,EAAMG,OAAO7B,MAEtD0B,EAAMI,QAAUJ,EAAMK,UAC5BL,EAAM1B,KAAO0B,EAAM1B,KAAKA,KAAO4B,EAAgBF,EAAMG,OAAO7B,MAGvDN,EAAAS,EAAAC,cAAA,uCAaf,SAASU,IACP,MAAM,IAAIkB,MACR,gVATJhB,EAAYiB,UAAY,CACtBjC,KAAMkC,IAAUC,OAChBN,MAAOK,IAAUE,OAAOC,WACxBP,OAAQI,IAAUI,KAClBP,SAAUG,IAAUI,gOC7BhBC,EAAmB,SAAAzC,GAAkB,IAAf0C,EAAe1C,EAAf0C,SACpBC,EAAgBC,UAAOC,4BAA4BH,EAASI,UAClE,OAAOpB,IAAMpB,cAAcyC,IAApBC,OAAAC,OAAA,CACLP,WACAC,iBACGA,EAAcO,QAIrBT,EAAiBN,UAAY,CAC3BO,SAAUN,IAAUe,MAAM,CACxBL,SAAUV,IAAUE,OAAOC,aAC1BA,YAGUE,+LCTMW,cACnB,SAAAA,EAAYxB,GAAO,IAAAyB,EAAA,OACjBA,EAAAC,EAAAC,KAAAC,KAAM5B,IAAN4B,MAEKC,OAASJ,EAAKI,OAAOC,KAAZC,QAAAN,KACdA,EAAKO,MAAQ,CACXC,QAAQ,GALOR,sCAQnBI,kBACED,KAAKM,SAAS,CACZD,QAASL,KAAKI,MAAMC,YAGxB7B,kBACE,OACE+B,EAAA1D,EAAAC,cAAA,WACEyD,EAAA1D,EAAAC,cAAC0D,EAAA,EAAD,CAAQC,MAAM,aAAaC,OAAK,EAACC,MAAM,QAAQC,OAAO,MACpDL,EAAA1D,EAAAC,cAAC0D,EAAA,EAAD,CAAaK,KAAK,KAAlB,kBACAN,EAAA1D,EAAAC,cAAC0D,EAAA,EAAD,CAAeM,QAASd,KAAKC,SAC7BM,EAAA1D,EAAAC,cAAC0D,EAAA,EAAD,CAAUH,OAAQL,KAAKI,MAAMC,OAAQU,QAAM,GACzCR,EAAA1D,EAAAC,cAAC0D,EAAA,EAAD,CAAKO,QAAM,GACTR,EAAA1D,EAAAC,cAAC0D,EAAA,EAAD,KACED,EAAA1D,EAAAC,cAAC0D,EAAA,EAAD,CAASK,KAAK,KAAd,SAEFN,EAAA1D,EAAAC,cAAC0D,EAAA,EAAD,KACED,EAAA1D,EAAAC,cAAC0D,EAAA,EAAD,CAASK,KAAK,UAAd,UAEFN,EAAA1D,EAAAC,cAAC0D,EAAA,EAAD,KACED,EAAA1D,EAAAC,cAAC0D,EAAA,EAAD,CAASK,KAAK,SAAd,SAEFN,EAAA1D,EAAAC,cAAC0D,EAAA,EAAD,KACED,EAAA1D,EAAAC,cAAC0D,EAAA,EAAD,CAASK,KAAK,YAAd,oBAhCoB3C,IAAM8C,WCFpCC,iBAAS,SAAAzE,GAAA,IAAGiC,EAAHjC,EAAGiC,SAAH,OACb8B,EAAA1D,EAAAC,cAACoE,EAAA,YAAD,CACE3C,MAAK,aAULC,OAAQ,SAAA9B,GAAI,OACV6D,EAAA1D,EAAAC,cAAAyD,EAAA1D,EAAAsE,SAAA,KACEZ,EAAA1D,EAAAC,cAACsE,EAAAvE,EAAD,CACEE,MAAOL,EAAK2E,KAAKC,aAAavE,MAC9BwE,KAAM,CACJ,CAAEC,KAAM,cAAeC,QAAS/E,EAAK2E,KAAKC,aAAavE,OACvD,CACEyE,KAAM,WACNC,QAAS,mDAIblB,EAAA1D,EAAAC,cAAA,QAAM4E,KAAK,QAEbnB,EAAA1D,EAAAC,cAAC6E,EAAD,CAAQC,UAAWlF,EAAK2E,KAAKC,aAAavE,QAC1CwD,EAAA1D,EAAAC,cAAA,WAAM2B,KA1BZ/B,KAAAmF,MAgCFZ,EAAOtC,UAAY,CACjBF,SAAUG,IAAUkD,KAAK/C,YAGZkC","file":"component---src-templates-blog-template-js-603e4e10880a8b368f93.js","sourcesContent":["import React from 'react'\nimport { graphql } from 'gatsby'\nimport { Container, Row, Col } from 'reactstrap'\n\nimport Layout from '../components/layout'\n\nexport default function Template({\n  data, // this prop will be injected by the GraphQL query below.\n}) {\n  const { markdownRemark } = data // data.markdownRemark holds our post data\n  const { frontmatter, html } = markdownRemark\n  return (\n    <Layout>\n      <Container>\n        <Row>\n          <Col>\n            <article>\n              <h1>{frontmatter.title}</h1>\n              <p>{frontmatter.date}</p>\n              <div dangerouslySetInnerHTML={{ __html: html }} />\n            </article>\n          </Col>\n        </Row>\n      </Container>\n    </Layout>\n  )\n}\n\nexport const pageQuery = graphql`\n  query($path: String!) {\n    markdownRemark(frontmatter: { path: { eq: $path } }) {\n      html\n      frontmatter {\n        date(formatString: \"MMMM DD, YYYY\")\n        path\n        title\n      }\n    }\n  }\n`\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport parsePath from \"./parse-path\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away,. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n.` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathnameSync(location.pathname)\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import React from 'react'\n// import { Link } from 'gatsby'\nimport {\n  Navbar,\n  Nav,\n  NavbarBrand,\n  NavbarToggler,\n  NavItem,\n  NavLink,\n  Collapse,\n} from 'reactstrap'\n\nexport default class Header extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.toggle = this.toggle.bind(this)\n    this.state = {\n      isOpen: false,\n    }\n  }\n  toggle() {\n    this.setState({\n      isOpen: !this.state.isOpen,\n    })\n  }\n  render() {\n    return (\n      <div>\n        <Navbar fixed=\"top-sticky\" light color=\"light\" expand=\"md\">\n          <NavbarBrand href=\"/\">Brent Anderson</NavbarBrand>\n          <NavbarToggler onClick={this.toggle} />\n          <Collapse isOpen={this.state.isOpen} navbar>\n            <Nav navbar>\n              <NavItem>\n                <NavLink href=\"/\">Home</NavLink>\n              </NavItem>\n              <NavItem>\n                <NavLink href=\"/about\">About</NavLink>\n              </NavItem>\n              <NavItem>\n                <NavLink href=\"/blog\">Blog</NavLink>\n              </NavItem>\n              <NavItem>\n                <NavLink href=\"/contact\">Contact</NavLink>\n              </NavItem>\n            </Nav>\n          </Collapse>\n        </Navbar>\n      </div>\n    )\n  }\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Helmet from 'react-helmet'\nimport { StaticQuery, graphql } from 'gatsby'\n\nimport Header from './header'\n\nimport 'bootstrap/dist/css/bootstrap.css'\nimport '../css/global.css'\n\nconst Layout = ({ children }) => (\n  <StaticQuery\n    query={graphql`\n      query SiteTitleQuery {\n        site {\n          siteMetadata {\n            title\n            description\n          }\n        }\n      }\n    `}\n    render={data => (\n      <>\n        <Helmet\n          title={data.site.siteMetadata.title}\n          meta={[\n            { name: 'description', content: data.site.siteMetadata.title },\n            {\n              name: 'keywords',\n              content: 'brent anderson, software, engineering, essays',\n            },\n          ]}\n        >\n          <html lang=\"en\" />\n        </Helmet>\n        <Header siteTitle={data.site.siteMetadata.title} />\n        <div>{children}</div>\n      </>\n    )}\n  />\n)\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n"],"sourceRoot":""}