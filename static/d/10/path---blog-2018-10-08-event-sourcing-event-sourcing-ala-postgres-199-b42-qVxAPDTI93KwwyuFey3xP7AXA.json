{"data":{"markdownRemark":{"html":"<h1>Event sourcing a la Postgres</h1>\n<p>BEGIN TRANSACTION</p>\n<ol>\n<li>\n<p>User connect, calls domain stored procedure</p>\n<ol>\n<li>\n<p>Domain stored procedure does any domain validation (if any), passes command to aggregate command validation</p>\n<ol>\n<li>\n<p>Aggregate state retrieved from tables, checked against command. Rollback on fail, generate events on success</p>\n<ol>\n<li>\n<p>Events passed to write_event stored procedure, which appends them to event log</p>\n<ol>\n<li>Event log aggregate trigger applies events to aggregate tables</li>\n<li>Event log notify trigger fires NOTIFY for subscribed consumers</li>\n<li>\n<p>Event log event handler triggers fire synchronous event handlers</p>\n<ul>\n<li>Event handlers do something with an event</li>\n<li>Projections are event handlers that have a unique ID, store high water read mark from events table per event with ID</li>\n<li>Process managers are event handlers that store state between events in a separate table</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>Return true</li>\n</ol>\n</li>\n<li>Return true</li>\n</ol>\n</li>\n<li>Return true</li>\n</ol>\n</li>\n<li>Return true\nCOMMIT</li>\n</ol>","frontmatter":{"date":null,"title":""},"fields":{"slug":"/blog/2018-10-08-event-sourcing/Event sourcing ala postgres/"}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}