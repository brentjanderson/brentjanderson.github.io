{"data":{"markdownRemark":{"html":"<p>At <a href=\"https://lambdaschool.com/\">Lambda School</a>, we love postgres. Here are a few gems I've learned that make\ndeveloping with it a joy:</p>\n<h2>PSQL for Mac</h2>\n<p>The best way to handle this is to install\n<a href=\"https://postgresapp.com/\">Postgres.app</a> and then add the following to your\nshell profile:</p>\n<pre><code class=\"language-shell\">export PATH=$PATH:/Applications/Postgres.app/Contents/Versions/latest/bin\n</code></pre>\n<p>Et voilà! Reload your terminal and <code>psql</code> will be ready to go, along with other\nPostgres command line tools. To update to the latest version is as simple as\nopening Postgres.app and letting it update.</p>\n<h2>PSQL Profile</h2>\n<p>This file in <code>~/.psqlrc</code> will configure <code>psql</code> with a few key settings to make\nit more useful:</p>\n<pre><code class=\"language-sql\">\\set QUIET 1 -- Disable logs while this script runs\n\n-- Show if we are in a transaction or not,\n-- and the current database if it's different from our username\n\\set PROMPT1 '%~%x%# '\n\n-- Update the prompt when we're on a multi-line script\n\\set PROMPT2 '[more] %R > '\n\n\\set VERBOSITY verbose\n\n\\set HISTFILE ~/.psql_history- :DBNAME\n\\set HISTCONTROL ignoredups\n\\set COMP_KEYWORD_CASE upper\n\n\n\\x auto -- Set expanded output to auto\n\n-- Stop transactions when there's an error\n\\set ON_ERROR_STOP on\n-- Require the user to rollback when there's an error\n\\set ON_ERROR_ROLLBACK interactive\n\n-- Make null characters print as this character\n\\pset null '¤'\n\\pset linestyle 'unicode'\n-- Make tables look nicer\n\\pset unicode_border_linestyle single\n\\pset unicode_column_linestyle single\n\\pset unicode_header_linestyle double\n\n-- Make intervals look clean\n\\set intervalstyle to 'postgres_verbose';\n\n-- Settings to pass to `less` when paging through output\n\\setenv LESS '-iMFXSx4R'\n\n-- Use visual studio code as my editor\n\\setenv EDITOR '/usr/local/bin/code -w'\n\n-- Show how long each query takes\n\\timing on\n\n-- Restore logs\n\\unset QUIET\n</code></pre>\n<h2>PG Services</h2>\n<p>A lesser-known feature of <code>psql</code> and other bundled Postgres command line tools\nis the <code>~/.pg_service.conf</code> file, or <a href=\"https://www.postgresql.org/docs/9.0/libpq-pgservice.html\">connection service file</a>.</p>\n<pre><code class=\"language-conf\"># comment\n[connection-name]\nhost=somewhere\nuser=foo\npassword=bar\n</code></pre>\n<p>You can create as many <code>[connection-name]</code> blocks as you like, and name them\naccording to what they configure. To use a specific service with psql is as easy\nas <code>PGSERVICE=connection-name psql</code>. To make it easier, I add the following to\nmy <code>.zshrc</code> file:</p>\n<pre><code class=\"language-zsh\">export PGSERVICE=local\n</code></pre>\n<p>The corresponding <code>[local]</code> section in the connection service file points to my\nlocal machine. Pointing at production, staging, test, or other environments\nis as easy as changing the variable on the command line.</p>\n<h2>Running a Postgres database locally</h2>\n<p>You can use <a href=\"https://postgresapp.com/\">Postgres.app</a> to setup and manage different versions of Postgres\non your mac. At <a href=\"https://lambdaschool.com/\">Lambda School</a> we use Docker to set up local\ndependencies (and I generally prefer using Docker to Postgres.app).</p>","frontmatter":{"date":"April 23, 2019","title":"How I Postgres"},"fields":{"slug":"/blog/2018-04-23-how-i-postgres/"}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}