{"version":3,"sources":["webpack:///./src/components/postSnippet.js","webpack:///./src/pages/blog.js","webpack:///./src/components/header.js","webpack:///./src/components/layout.js"],"names":["PostSnippet","_ref","post","react_default","a","createElement","gatsby_browser_entry","to","fields","slug","frontmatter","title","date","excerpt","IndexPage","Posts","data","allMarkdownRemark","edges","filter","edge","node","map","postSnippet","key","id","layout","reactstrap_es","pageQuery","Header","props","_this","_React$Component","call","this","toggle","bind","assertThisInitialized_default","state","isOpen","setState","render","fixed","light","color","expand","href","onClick","navbar","React","Component","Layout","children","query","Fragment","Helmet_default","site","siteMetadata","meta","name","content","lang","header_Header","siteTitle","_2328579951","propTypes","PropTypes","isRequired"],"mappings":"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","file":"component---src-pages-blog-js-b708edf7450c63d4a5cf.js","sourcesContent":["import React from 'react'\nimport { Link } from 'gatsby'\n\nconst PostSnippet = ({ post }) => {\n  return (\n    <div>\n      <h1>\n        <Link to={post.fields.slug}>{post.frontmatter.title}</Link>\n      </h1>\n      <p>\n        <strong>{post.frontmatter.date}</strong>\n      </p>\n      <p>{post.excerpt}</p>\n    </div>\n  )\n}\n\nexport default PostSnippet\n","import React from 'react'\nimport { graphql } from 'gatsby'\nimport { Container, Row, Col } from 'reactstrap'\n\nimport PostSnippet from '../components/postSnippet'\nimport Layout from '../components/layout'\n\nconst IndexPage = ({\n  data: {\n    allMarkdownRemark: { edges },\n  },\n}) => {\n  const Posts = edges\n    .filter(edge => !!edge.node.frontmatter.date) // You can filter your posts based on some criteria\n    .map(edge => <PostSnippet key={edge.node.id} post={edge.node} />)\n\n  return (\n    <Layout>\n      <Container>\n        <Row>\n          <Col>\n            <div>{Posts}</div>\n          </Col>\n        </Row>\n      </Container>\n    </Layout>\n  )\n}\n\nexport default IndexPage\n\nexport const pageQuery = graphql`\n  query {\n    allMarkdownRemark(sort: { order: DESC, fields: [frontmatter___date] }) {\n      edges {\n        node {\n          id\n          fields {\n            slug\n          }\n          excerpt(pruneLength: 250)\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n          }\n        }\n      }\n    }\n  }\n`\n","import React from 'react'\n// import { Link } from 'gatsby'\nimport {\n  Navbar,\n  Nav,\n  NavbarBrand,\n  NavbarToggler,\n  NavItem,\n  NavLink,\n  Collapse,\n} from 'reactstrap'\n\nexport default class Header extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.toggle = this.toggle.bind(this)\n    this.state = {\n      isOpen: false,\n    }\n  }\n  toggle() {\n    this.setState({\n      isOpen: !this.state.isOpen,\n    })\n  }\n  render() {\n    return (\n      <div>\n        <Navbar fixed=\"top-sticky\" light color=\"light\" expand=\"md\">\n          <NavbarBrand href=\"/\">Brent Anderson</NavbarBrand>\n          <NavbarToggler onClick={this.toggle} />\n          <Collapse isOpen={this.state.isOpen} navbar>\n            <Nav navbar>\n              <NavItem>\n                <NavLink href=\"/\">Home</NavLink>\n              </NavItem>\n              <NavItem>\n                <NavLink href=\"/about\">About</NavLink>\n              </NavItem>\n              <NavItem>\n                <NavLink href=\"/blog\">Blog</NavLink>\n              </NavItem>\n            </Nav>\n          </Collapse>\n        </Navbar>\n      </div>\n    )\n  }\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Helmet from 'react-helmet'\nimport { StaticQuery, graphql } from 'gatsby'\n\nimport Header from './header'\n\nimport 'bootstrap/dist/css/bootstrap.css'\nimport '../css/global.css'\n\nconst Layout = ({ children }) => (\n  <StaticQuery\n    query={graphql`\n      query SiteTitleQuery {\n        site {\n          siteMetadata {\n            title\n            description\n          }\n        }\n      }\n    `}\n    render={data => (\n      <>\n        <Helmet\n          title={data.site.siteMetadata.title}\n          meta={[\n            { name: 'description', content: data.site.siteMetadata.title },\n            {\n              name: 'keywords',\n              content: 'brent anderson, software, engineering, essays',\n            },\n          ]}\n        >\n          <html lang=\"en\" />\n        </Helmet>\n        <Header siteTitle={data.site.siteMetadata.title} />\n        <div>{children}</div>\n      </>\n    )}\n  />\n)\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n"],"sourceRoot":""}