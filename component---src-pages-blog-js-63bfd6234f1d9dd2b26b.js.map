{"version":3,"sources":["webpack:///./src/components/postSnippet.js","webpack:///./src/pages/blog.js","webpack:///./src/components/header.js","webpack:///./src/components/layout.js"],"names":["PostSnippet","_ref","post","react_default","a","createElement","gatsby_browser_entry","to","fields","slug","frontmatter","title","date","excerpt","__webpack_require__","d","__webpack_exports__","pageQuery","IndexPage","Posts","data","allMarkdownRemark","edges","filter","edge","node","map","postSnippet","key","id","layout","reactstrap_es","Header","props","_this","_React$Component","call","this","toggle","bind","assertThisInitialized_default","state","isOpen","setState","render","fixed","light","color","expand","href","onClick","navbar","React","Component","Layout","children","query","Fragment","Helmet_default","site","siteMetadata","meta","name","content","lang","header_Header","siteTitle","_2328579951","propTypes","PropTypes","isRequired"],"mappings":"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","file":"component---src-pages-blog-js-63bfd6234f1d9dd2b26b.js","sourcesContent":["import React from 'react'\nimport { Link } from 'gatsby'\n\nconst PostSnippet = ({ post }) => {\n  return (\n    <div>\n      <h1>\n        <Link to={post.fields.slug}>{post.frontmatter.title}</Link>\n      </h1>\n      <p>\n        <strong>{post.frontmatter.date}</strong>\n      </p>\n      <p>{post.excerpt}</p>\n    </div>\n  )\n}\n\nexport default PostSnippet\n","import React from 'react'\nimport { graphql } from 'gatsby'\nimport { Container, Row, Col } from 'reactstrap'\n\nimport PostSnippet from '../components/postSnippet'\nimport Layout from '../components/layout'\n\nconst IndexPage = ({\n  data: {\n    allMarkdownRemark: { edges },\n  },\n}) => {\n  const Posts = edges\n    .filter(edge => !!edge.node.frontmatter.date) // You can filter your posts based on some criteria\n    .map(edge => <PostSnippet key={edge.node.id} post={edge.node} />)\n\n  return (\n    <Layout>\n      <Container>\n        <Row>\n          <Col>\n            <div>{Posts}</div>\n          </Col>\n        </Row>\n      </Container>\n    </Layout>\n  )\n}\n\nexport default IndexPage\n\nexport const pageQuery = graphql`\n  query {\n    allMarkdownRemark(\n      sort: { order: DESC, fields: [frontmatter___date] }\n      filter: { frontmatter: { draft: { eq: false } } }\n    ) {\n      edges {\n        node {\n          id\n          fields {\n            slug\n          }\n          excerpt(pruneLength: 250)\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n          }\n        }\n      }\n    }\n  }\n`\n","import React from 'react'\n// import { Link } from 'gatsby'\nimport {\n  Navbar,\n  Nav,\n  NavbarBrand,\n  NavbarToggler,\n  NavItem,\n  NavLink,\n  Collapse,\n} from 'reactstrap'\n\nexport default class Header extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.toggle = this.toggle.bind(this)\n    this.state = {\n      isOpen: false,\n    }\n  }\n  toggle() {\n    this.setState({\n      isOpen: !this.state.isOpen,\n    })\n  }\n  render() {\n    return (\n      <div>\n        <Navbar fixed=\"top-sticky\" light color=\"light\" expand=\"md\">\n          <NavbarBrand href=\"/\">Brent Anderson</NavbarBrand>\n          <NavbarToggler onClick={this.toggle} />\n          <Collapse isOpen={this.state.isOpen} navbar>\n            <Nav navbar>\n              <NavItem>\n                <NavLink href=\"/\">Home</NavLink>\n              </NavItem>\n              <NavItem>\n                <NavLink href=\"/about\">About</NavLink>\n              </NavItem>\n              <NavItem>\n                <NavLink href=\"/blog\">Blog</NavLink>\n              </NavItem>\n            </Nav>\n          </Collapse>\n        </Navbar>\n      </div>\n    )\n  }\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Helmet from 'react-helmet'\nimport { StaticQuery, graphql } from 'gatsby'\n\nimport Header from './header'\n\nimport 'bootstrap/dist/css/bootstrap.css'\nimport '../css/global.css'\n\nconst Layout = ({ children }) => (\n  <StaticQuery\n    query={graphql`\n      query SiteTitleQuery {\n        site {\n          siteMetadata {\n            title\n            description\n          }\n        }\n      }\n    `}\n    render={data => (\n      <>\n        <Helmet\n          title={data.site.siteMetadata.title}\n          meta={[\n            { name: 'description', content: data.site.siteMetadata.title },\n            {\n              name: 'keywords',\n              content: 'brent anderson, software, engineering, essays',\n            },\n          ]}\n        >\n          <html lang=\"en\" />\n        </Helmet>\n        <Header siteTitle={data.site.siteMetadata.title} />\n        <div>{children}</div>\n      </>\n    )}\n  />\n)\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n"],"sourceRoot":""}